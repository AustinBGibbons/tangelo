#!${PYTHON_EXECUTABLE}

import os
import platform
import signal
import subprocess
import sys

def start():
    if os.path.exists(pidfile):
        sys.stderr.write("error: tangelo already seems to be running\n")
        return 1

    os.chdir(path)
    args = [sys.executable, cherry,
        "-i", "tangelo",
        "-c", "server.conf",
        "-P", path]
    if os_name != "Windows":
        args += ["-d", "-p", pidfile]
    return subprocess.call(args)

def stop():
    retval = 0

    if os.path.exists(pidfile):
        f = open(pidfile)

        try:
            pid = int(f.read())
        except ValueError:
            sys.stderr.write("error: tangelo.pid does not contain a valid process id")
            return 1

        retval = os.kill(pid, signal.SIGKILL)
        os.remove(pidfile)

    return retval

def restart():
    stop()
    return start()

def usage():
    sys.stderr.write("usage: tangelo [start|stop|restart]\n")

# Read the action argument.
if len(sys.argv) < 2:
    usage()
    sys.exit(1)

# Configured variables.
cherry = "@CherryPy_EXECUTABLE@"

# Detect operating system (and OSX version, if applicable).
os_name = platform.system()
if os_name == "Darwin":
    version = map(int, platform.mac_ver()[0].split("."))

# Determine the path to this script.
path = os.path.dirname(os.path.abspath(sys.argv[0]))
pidfile = path + "/tangelo.pid"

# Dispatch on action argument.
action = sys.argv[1]
code = 1
if action == "start":
    code = start()
elif action == "stop":
    if os_name == "Windows" or (os_name == "Darwin" and version[1] == 6):
        sys.stderr.write("error: stop action not supported on this platform\n")
        sys.exit(1)
    code = stop()
elif action == "restart":
    if os == "Windows" or (os == "Darwin" and version[1] == 6):
        sys.stderr.write("error: restart action not supported on this platform\n")
        sys.exit(1)
    code = restart()
else:
    usage()
    code = 1

sys.exit(code)
